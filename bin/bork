#!/usr/bin/env bash

# --- if build, we include these instead of sourcing them
setupFn=$(cat <<HERE
getDir () {
  fname=\$1
  [ -h \$fname ] && fname=\$(readlink \$fname)
  echo "\$(cd "\$(dirname \$fname)" && pwd)"
}
# used by loader to find core/ and stdlib/
BORK_SOURCE_DIR="\$(getDir \$(getDir \${BASH_SOURCE[0]}))"
HERE)
eval "$setupFn"

# --------------------------------------------------------
is_compiled () { return 1; }

for file in $BORK_SOURCE_DIR/lib/helpers/*.sh \
            $BORK_SOURCE_DIR/lib/declarations/*.sh;
do
  . $file
done

operation=$1
shift

# used by include to find 'include foo/bar.sh'
BORK_SCRIPT_DIR=$(getDir $(pwd -P)/$1)
BORK_WORKING_DIR=$PWD

case "$operation" in
  compile) . $BORK_SOURCE_DIR/bin/bork-compile $* ;;
  load) : ;;
  satisfy | status) . $1 ;;
  check)
    fn=$1
    shift
    operation=status
    $fn $* ;;
  do)
    fn=$1
    shift
    operation=satisfy
    $fn $* ;;
  *) cat <<END
bork usage:

bork operation [config-file] [options]

where "operation" is one of:

- check:      perform 'status' for a single command
    example:  bork check ok github mattly/dotfiles
- compile:    compile the config file to a self-contained script output to STDOUT
    --conflicts=(y|yes|n|no)  If given, sets an automatic answer for conflict resolution.
    example:  bork compile dotfiles.sh --conflicts=y > install.sh
- do:         perform 'satisfy' for a single command
    example:  bork do ok github mattly/dotfiles
- satisfy:    satisfy the config file's conditions if possible
- status:     determine if the config file's conditions are met
END
  exit 1
  ;;
esac

