#!/bin/bash
brew () {
  local pkg=${1}
  local c=''
  if contains "$brews_have" "$pkg" ; then
    if contains "$brews_outdated" "$pkg" ; then
      bake "command brew upgrade $pkg"
    fi
  else
    bake "command brew install $@"
  fi
}
brews_have=$(command brew list)
brews_outdated=$(command brew outdated | awk '{print $1}')
brew_taps=$(command brew tap)

brew_tap () {
  if ! contains "$brew_taps" $1 ; then
    bake "command brew tap $1"
  fi
}

defaults() {
  domain=$1
  key=$2
  if matches "$3" "^\-"; then
    desired_type=$3
    desired_val=$4
  else
    desired_type="-string"
    desired_val=$3
  fi

  current_type="$(get_field "$(command defaults read-type $domain $key)" 3)"
  type_matches=false
  current_val=$(command defaults read $1 $2)
  val_matches=false

  if [[ "$current_type" = "boolean" ]]; then
    current_type="bool"
    if [[ $current_val = 0 ]]; then current_val="false"; fi
    if [[ $current_val = 1 ]]; then current_val="true"; fi
  fi
  if [ "$current_type" = "-$desired_type" ]; then type_matches=true; fi
  if [[ "$current_val" = "$desired_val" ]]; then val_matches=true; fi

  if [[ $val_matches = false ]] || [[ $type_matches = false ]]; then
    bake "command defaults write $domain $key $desired_type $desired_val"
  fi
}
git () {
  git_url=$1
  dir=$2
  if [ -z $dir ]; then
    repo_name=$(basename $1 .git)
    dir="$current_destination/$repo_name"
  fi
  if [ ! -d $dir ]; then
    bake "mkdir -p $dir"
    bake "command git clone $git_url $dir"
  else
    fetch=$(cd $dir; command git fetch --dry-run 2>&1 )
    if matches "$fetch" "\s\+[a-f0-9]\{7\}\.\.[a-f0-9]\{7\}" ; then
      git_update "$dir" "$git_url"
      return 0
    fi
    status=$(cd $dir; command git status )
    if matches "$status" "Your branch is behind" ; then
      git_update "$dir" "$git_url"
    fi
  fi
}

git_update () {
  [ -n "$2" ] && echo "updating $2"
  bake --dir $1 "command git pull"
  bake --dir $1 "command git log HEAD@{1}.."
}
github () {
  git "https://github.com/$(echo $1).git" $2
}


nodenv () {
  if ! contains "$(command nodenv versions --bare )" $1; then
    bake "command nodenv install $1"
  fi
}

rbenv () {
  if ! contains "$(command rbenv versions --bare )" $1; then
    bake "command rbenv install $1"
  fi
}


contains () {
  matches "$1" "^$2\$"
}

matches () {
  present=$(echo "$1" | grep -e "$2" > /dev/null)
  return $present
}

replace () {
  echo $(echo "$1" | sed -E 's|'"$2"'|'"$3"'|')
}

substring () {
  echo $(expr "$1" : $2)
}

get_field () {
  echo $(echo "$1" | awk '{print $'"$2"'}')
}

current_destination=$PWD
set_dir () {
  current_destination=$1
}
unset_dir () {
  current_destination=$PWD
}

include () {
  if [ -e "$scriptDir/$1" ]; then
    # if [ $operation = 'build' ]; then
    #   echo "$scriptDir/$1"
    # else
      . "$scriptDir/$1"
    # fi
  else
    echo "include: $scriptDir/$1: No such file or directory"
    exit 1
  fi
}

baking_dir=$PWD
bake_at () {
  baking_dir=$1
}
bake () {
  opdir=$PWD

  if matches "$1" "^--dir"; then
    opdir="$2"
    shift 2
  fi

  if [ $operation = 'install' ]; then
    echo "$1"
    (
      cd $opdir
      $1
    )
    status="$(echo $?)"
    if [ "$status" -gt "0" ]; then
      exit $status
    fi
  elif [ $operation = 'print' ]; then
    echo "$1"
  fi
}
script=$1
scriptName=$(basename $script)
scriptDir=$(dirname $script)

operation='install'

include $scriptName
